<%- include("../../views/pratials/user/header") %>

    <!-- Profile Page CSS -->
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f4f6f9;
            color: #333;
        }

        .profile-container {
            max-width: 1100px;
            margin: 40px auto;
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        /* Sidebar Navigation */
        .profile-sidebar {
            width: 280px;
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            padding: 20px;
        }

        .profile-sidebar h3 {
            font-size: 1.4rem;
            color: #007bff;
            margin-bottom: 20px;
            text-align: center;
        }

        .profile-sidebar ul {
            list-style: none;
            padding: 0;
        }

        .profile-sidebar ul li {
            margin: 15px 0;
        }

        .profile-sidebar a {
            color: #555;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 10px;
            text-decoration: none;
            padding: 10px 15px;
            border-radius: 8px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .profile-sidebar a:hover,
        .profile-sidebar a.active {
            background-color: #007bff;
            color: #fff;
        }

        /* Main Content */
        .profile-content {
            flex: 1;
            background: #fff;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .profile-header {
            display: flex;
            align-items: center;
            gap: 20px;
            border-bottom: 2px solid #f0f0f0;
            padding-bottom: 20px;
        }

        .profile-header h2 {
            margin: 0;
            font-size: 1.8rem;
            color: #333;
        }

        .profile-header p {
            margin: 5px 0 0;
            color: #555;
        }

        /* Order Page Styling */
        .order-details {
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
            transition: transform 0.3s ease;
        }

        .order-details:hover {
            transform: translateY(-5px);
        }

        .order-details h3 {
            font-size: 1.4rem;
            color: #007bff;
            margin-bottom: 10px;
        }

        .order-details p {
            font-size: 1rem;
            color: #555;
            margin: 5px 0;
        }

        /* Product section */
        .ordered-products .product {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            border-bottom: 1px solid #ddd;
            padding-bottom: 15px;
            transition: background-color 0.3s ease;
        }

        .ordered-products .product:hover {
            background-color: #f9f9f9;
        }

        .product-info {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .product-image {
            width: 80px;
            height: 80px;
            margin-left: 20px;
            border-radius: 8px;
            object-fit: cover;
        }

        .product-name {
            font-size: 1.1rem;
            font-weight: bold;
            color: #333;
        }

        .product-price {
            font-size: 1rem;
            color: #28a745;
            font-weight: bold;
        }

        .order-status {
            margin-top: 10px;
            font-size: 1rem;
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 8px;
            display: inline-block;
        }

        .order-status.processing {
            background-color: #ffcc00;
            color: #fff;
        }

        .order-status.shipped {
            background-color: #28a745;
            color: #fff;
        }

        .cancel-button {
            background-color: #ff4d4d;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 10px 15px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .cancel-button:hover {
            background-color: #e63939;
            transform: scale(1.05);
        }

        .cancel-button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
            opacity: 0.7;
        }

        .no-orders {
            font-size: 1.2rem;
            color: #777;
            text-align: center;
            margin-top: 50px;
        }

        .button {
            margin-top: 10px;
            font-size: 1rem;
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 8px;
            display: inline-block;

        }
        .cancelled-product {
    opacity: 0.5;
    pointer-events: none;
}
.cancelled-product .cancel-button {
    display: none;
}

    </style>

    <!-- Profile Page -->
    <div class="profile-container">
        <!-- Sidebar -->
        <div class="profile-sidebar">
            <h3>Dashboard</h3>
            <ul>
                <li><a href="/userprofile"><i class="fas fa-user"></i> Profile</a></li>
                <li><a href="/userAdderss"><i class="fas fa-map-marker-alt"></i> My Address</a></li>
                <li><a href="/my-orders" class="active"><i class="fas fa-shopping-cart"></i> My Orders</a></li>
                <li><a href="/wallet"><i class="fas fa-wallet"></i> Wallet</a></li>
                <li><a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
            </ul>
        </div>

<!-- Main Profile Content -->
<div class="profile-content">
    <h2>My Orders</h2>

    <% if (orders && orders.length > 0) { %>
        <% orders.forEach(function(order) { 
            const activeItemsCount = order.orderedItems.filter(item => item.status !== 'Cancelled').length;
        %>
            <div class="order-details">
                <h3>Order <%= order.orderId %></h3>
                <p><strong>Order Date:</strong> <%= new Date(order.createdOn).toLocaleDateString() %></p>
                <p><strong>Status:</strong> 
                    <span class="order-status <%= order.status.toLowerCase() %>">
                        <%= order.status %>
                    </span>
                </p>

                <div class="ordered-products">
                    <% order.orderedItems.forEach(function(item) { %>
                        <div class="product <%= item.status === 'Cancelled' ? 'cancelled-product' : '' %>">
                            <div class="product-info">
                                <span class="product-name"><%= item.product.productName %></span>
                                <span class="product-price">Price: <%= item.price %></span>
                                <span class="quantity">Qty: <%= item.quantity %></span>
                                <span class="weights">Weight: <%= item.weights %></span>
                                <span class="flavour">Flavour: <%= item.flavours %></span>

                                <% if (item.status === 'Cancelled') { %>
                                    <span class="product-status" style="color: red;">[Cancelled]</span>
                                <% } %>
                            </div>

                            <img src="/uploads/re-image/<%= item.product.productImage[0] || 'default.jpg' %>" 
                                alt="Product Image" class="product-image">

                            <% if (
                                item.status !== 'Cancelled' &&
                                order.status === 'Placed' &&
                                activeItemsCount > 1
                            ) { %>
                                <button class="cancel-button"
                                    onclick="showRemoveProductModal('<%= order._id %>', '<%= item.product._id %>')">
                                    Cancel Product
                                </button>
                            <% } %>
                        </div>
                    <% }); %>
                </div>

                <!-- Cancel Order Button with status checks -->
                <% if (order.status === 'Placed') { %>
                    <button class="cancel-button" onclick="showCancelModal('<%= order._id %>')">
                        Cancel Order
                    </button>
                <% } else if (order.status === 'Shipped') { %>
                    <span class="order-status shipped">Shipped</span>
                <% } else if (order.status === 'Payment Pending') { %>
                    <button class="button" onclick="Repay('<%= order._id %>')">Repay</button>
                <% } else if (order.status === 'Delivered') { %>
                    <span class="order-status delivered">Delivered</span>
                    <button class="return-button button" onclick="showReturnOrderModal('<%= order._id %>')">
                        Return Product
                    </button>
                    <button class="rate-button button" onclick="showRatingModal('<%= order._id %>')">
                        Rate Product
                    </button>
                <% } else if (order.status === 'Cancelled') { %>
                    <span class="order-status cancelled">Cancelled</span>
                <% } %>

                <button class="details-button button" onclick="viewOrderDetails('<%= order._id %>')">
                    View Details
                </button>
            </div>
        <% }); %>
    <% } else { %>
        <p class="no-orders">You have no orders yet.</p>
    <% } %>
</div>

        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.6/dist/sweetalert2.all.min.js"></script>

        <script>
            // Cancel Order function
            async function showCancelModal(orderId) {
                // Show the confirmation prompt first
                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to undo this action!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, remove it!',
                });

                // If the user confirms the cancellation, proceed with the cancel order logic
                if (result.isConfirmed) {
                    const response = await fetch(`/cancel-order/${orderId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    const data = await response.json();

                    if (data.success) {
                        // SweetAlert success message
                        Swal.fire({
                            title: 'Success!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonText: 'Okay',
                            confirmButtonColor: '#3085d6',
                        }).then(() => {
                            location.reload(); // Reload page to reflect changes
                        });
                    } else {
                        // SweetAlert error message
                        Swal.fire({
                            title: 'Error!',
                            text: data.message,
                            icon: 'error',
                            confirmButtonText: 'Try Again',
                            confirmButtonColor: '#d33',
                        });
                    }
                } else {
                    // SweetAlert message if the user cancels the action
                    Swal.fire({
                        title: 'Cancelled',
                        text: 'The order cancellation has been cancelled.',
                        icon: 'info',
                        confirmButtonText: 'Okay',
                        confirmButtonColor: '#3085d6',
                    });
                }
            }


            // Remove Product from Order function
            async function showRemoveProductModal(orderId, productId) {
                const response = await fetch(`/remove-product/${orderId}/${productId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const data = await response.json();

                if (data.success) {
                    // SweetAlert success message
                    Swal.fire({
                        title: 'Success!',
                        text: data.message,
                        icon: 'success',
                        confirmButtonText: 'Okay',
                        confirmButtonColor: '#3085d6',
                    }).then(() => {
                        location.reload(); // Reload page to reflect changes
                    });
                } else {
                    // SweetAlert error message
                    Swal.fire({
                        title: 'Error!',
                        text: data.message,
                        icon: 'error',
                        confirmButtonText: 'Try Again',
                        confirmButtonColor: '#d33',
                    });
                }
            }

            async function showReturnOrderModal(orderId) {
                const { value: reason } = await Swal.fire({
                    title: 'Return Order',
                    input: 'textarea',
                    inputLabel: 'Reason for Return',
                    inputPlaceholder: 'Write your reason here...',
                    inputAttributes: {
                        'aria-label': 'Reason for return'
                    },
                    showCancelButton: true,
                    confirmButtonText: 'Submit',
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                });

                if (reason) {
                    const response = await fetch(`/return-order/${orderId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason }),
                    });

                    const data = await response.json();

                    if (data.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonText: 'Okay',
                            confirmButtonColor: '#3085d6',
                        }).then(() => {
                            location.reload(); // Reload to reflect changes
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message,
                            icon: 'error',
                            confirmButtonText: 'Try Again',
                            confirmButtonColor: '#d33',
                        });
                    }
                } else if (reason === '') {
                    Swal.fire({
                        title: 'Cancelled',
                        text: 'You need to provide a reason for the return.',
                        icon: 'info',
                        confirmButtonText: 'Okay',
                        confirmButtonColor: '#3085d6',
                    });
                }
            }

            function Repay(orderId) {
    fetch(`/retry-payment/${orderId}`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                var options = {
                    key: data.RAZORPAY_KEY_ID,
                    amount: data.orderAmount,
                    currency: "INR",
                    name: "OxyFitness",
                    description: "Order Repayment",
                    order_id: data.orderId,
                    handler: function (response) {
                        fetch("/verify-payment", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(response),
                        })
                            .then(res => res.json())
                            .then(result => {
                                if (result.success) {
                                    Swal.fire({
                                        icon: "success",
                                        title: "Payment Successful!",
                                        text: "Your order has been placed successfully.",
                                        confirmButtonColor: "#3085d6",
                                        confirmButtonText: "OK",
                                    }).then(() => {
                                        location.reload();
                                    });
                                } else {
                                    Swal.fire({
                                        icon: "error",
                                        title: "Payment Failed",
                                        text: "Something went wrong. Please try again.",
                                    });
                                }
                            });
                    },
                    theme: { color: "#3399cc" }
                };

                var rzp1 = new Razorpay(options);
                rzp1.open();
            } else {
                Swal.fire({
                    icon: "warning",
                    title: "Oops!",
                    text: "Something went wrong. Please try again.",
                });
            }
        })
        .catch(error => {
            console.error("Error:", error);
            Swal.fire({
                icon: "error",
                title: "Server Error",
                text: "Unable to process your request right now.",
            });
        });
}





            async function viewOrderDetails(orderId) {

                window.location.href = `/order-details/${orderId}`;
            }


        </script>



        <%- include("../../views/pratials/user/footer") %>
    </div>